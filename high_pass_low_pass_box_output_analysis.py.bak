import numpy as np
import glob
import matplotlib.pyplot as plt
import matplotlib
import scipy
import scipy.signal as signal
from scipy.signal import kaiserord, lfilter, firwin, freqz
import matplotlib.mlab as ml
from scipy.interpolate import griddata
from matplotlib.lines import Line2D

markers = []
for m in Line2D.markers:
    try:
        if len(m) == 1 and m != ' ':
            markers.append(m)
    except TypeError:
        pass

styles = markers + [
    r'$\lambda$',
    r'$\bowtie$',
    r'$\circlearrowleft$',
    r'$\clubsuit$',
    r'$\checkmark$']


def rmse(ts1,ts2):
    #ts1 = predicted value
    #ts2 = true value
    arraysize=np.size(ts1)
    diff_sq=np.square(ts1-ts2)
    mse=np.sum(diff_sq)*(1.0/arraysize)
    return np.sqrt(mse)
    
print 'NOTE: NOT COMPLETELY SURE THAT THE PARAMETERS USED IN THE MATLB ANLSYSI WERE SPOT ON...'


array_size=239

source="/home/ph290/data1/boxmodel_testing_less_boxes_4_annual_matlab_high_low_pass/results/order_runs_processed_in_box_model.txt"
inp = open(source,"r")
count=0
for line in inp:
    count +=1

'''
Read in subpolar gyre co2 flux data from QUMP
'''

run_names_order=str.split(line,' ')
run_names_order=run_names_order[0:-1]

input_year=np.zeros(array_size)
qump_co2_flux=np.zeros(array_size)

model_vars=['stash_30249']


dir_name2=['/home/ph290/data1/qump_out_python/annual_means/','/home/ph290/data1/qump_out_python/annual_means/low_pass_2/','/home/ph290/data1/qump_out_python/annual_means/band_pass_2/']
no_filenames=glob.glob(dir_name2[0]+'*30249.txt')
filenames2=glob.glob(dir_name2[0]+'*'+run_names_order[0]+'*'+model_vars[0]+'.txt')

input2=np.genfromtxt(filenames2[0], delimiter=",")

qump_year=np.zeros(array_size)
qump_data=np.zeros((3,array_size,np.size(no_filenames)))
#first 3 referes to normal, low-pass, band pass

input2=np.genfromtxt(filenames2[0], delimiter=",")
qump_year=input2[:,0]

for k in np.arange(np.size(dir_name2)):
	for i in range(np.size(no_filenames)):
		filenames2=glob.glob(dir_name2[k]+'*'+run_names_order[i]+'*'+model_vars[0]+'.txt')
		input2=np.genfromtxt(filenames2[0], delimiter=",")
		if input2[:,1].size == array_size:
			qump_data[k,:,i]=input2[:,1]
			#should this be column 1???? Is this box 1?
		
'''
Read in subpolar gyre co2 flux data from box model
simulations with various smoothings...
'''

dir_name='/home/ph290//data1/boxmodel_testing_less_boxes_4_annual_matlab_high_low_pass/results/'
filenames=glob.glob(dir_name+'box_model*.csv')
input1=np.genfromtxt(filenames[0], delimiter=",")


filenamesc=glob.glob(dir_name+'box_model_qump_results_1_*.csv')
filenamesb=glob.glob(dir_name+'box_model_qump_results_?_1.csv')
file_order=np.empty(np.size(filenames))
file_order2=np.empty(np.size(filenames))

box_co2_flux=np.zeros((array_size,np.size(no_filenames),np.size(filenamesc),np.size(filenamesb)))
box_years=input1[:,0]

for i in range(np.size(filenames)):
    tmp=filenames[i].split('_')
    tmp2=tmp[13].split('.')
    file_order[i]=np.int(tmp2[0])
    tmp3=tmp[14].split('.')
    file_order2[i]=np.int(tmp3[0])

for i in np.arange(np.size(filenamesb)):
    for j in np.arange(np.size(filenamesc)):
        loc=np.where((file_order == i+1) & (file_order2 == j+1))
        #print 'reading box model file '+str(i)
        filenames[loc[0]]
        input1=np.genfromtxt(filenames[loc[0]], delimiter=",")
        box_co2_flux[:,:,j,i]=input1[:,1:np.size(no_filenames)+1]
    
'''
Now compare the two above sets of data to get a handle
on what drives the low and high frequency variability
'''

########################
# low pass # band pass #
########################

#overplot on each of the above the box model result with either low/band pass input variables.

plot_names=['no smoothing','salt smoothed (low pass)','temp smoothed (low pass)','Alk smoothed (low)','moc smoothed (low pass)','atm co2 smoothed (low pass)','salt smoothed (band pass)','temp smoothed (band pass)','Alk smoothed (band)','moc smoothed (band pass)','atm co2 smoothed (band pass)','temp and alk (low pass)','all band passed','all band passed, salt const','all band passed, temp const','all band passed, Alk const','all band passed, moc const','all band passed, atm const','all band passed, temp and alk const']

for i in range(1):
	fig = plt.figure(figsize=(5*3.13,3*3.13))
	ax1 = fig.add_subplot(3,1,1)
	lns=plt.plot(qump_year,qump_data[0,:,i],c='b',linewidth=2,label='QUMP flux')
	for k in np.append(np.arange(0,6),[11]):
		#ln_tmp=plt.plot(qump_year,(box_co2_flux[:,i,k]/1.12e13)*1.0e15/12.0,marker=styles[k],markersize=4,label=plot_names[k])
		ln_tmp=plt.plot(qump_year,(box_co2_flux[:,i,k]/1.12e13)*1.0e15/12.0,label=plot_names[k])
		lns += ln_tmp
		#this should plot out the variously filtered (at input to box model) box model results,
		#for the QUMP ensemble member specified by i. - should be able to spot which fail to match QUMP flux

	labs = [l.get_label() for l in lns]
	plt.legend(lns, labs).draw_frame(False)

	ax2 = fig.add_subplot(3,1,2)
	lns=plt.plot(qump_year,qump_data[0,:,i],c='b',linewidth=2,label='QUMP flux')
	for k in np.append([0],np.arange(6,11)):
		ln_tmp=plt.plot(qump_year,(box_co2_flux[:,i,k]/1.12e13)*1.0e15/12.0,marker=styles[k],markersize=4,label=plot_names[k])
		lns += ln_tmp
		#this should plot out the variously filtered (at input to box model) box model results,
		#for the QUMP ensemble member specified by i. - should be able to spot which fail to match QUMP flux
	
	plt.plot(qump_year,qump_data[0,:,i])

	labs = [l.get_label() for l in lns]
	plt.legend(lns, labs).draw_frame(False)

	ax3 = fig.add_subplot(3,1,3)
	lns=plt.plot(qump_year,qump_data[2,:,i]-np.mean(qump_data[2,:,i]),c='b',linewidth=2,label='QUMP flux')
	for k in np.arange(12,19):
		ln_tmp=plt.plot(qump_year,((box_co2_flux[:,i,k]/1.12e13)*1.0e15/12.0)-np.mean((box_co2_flux[:,i,k]/1.12e13)*1.0e15/12.0),marker=styles[k],markersize=4,label=plot_names[k])
		lns += ln_tmp
		#this should plot out the variously filtered (at input to box model) box model results,
		#for the QUMP ensemble member specified by i. - should be able to spot which fail to match QUMP flux
	labs = [l.get_label() for l in lns]
	plt.legend(lns, labs).draw_frame(False)

	plt.tight_layout()
	plt.show()

colours=['b','g','r','c','k']
sym_size_var=0.1
line_width_var=0.1

fig = plt.figure(figsize=(5*3.13,3*3.13))
for i,k in enumerate(np.append([0],np.arange(6,11))):
    ax1 = fig.add_subplot(2,4,i+1)
    for j in np.arange(np.size(filenamesb)):
        ax1.scatter(qump_data[0,:,:],(box_co2_flux[:,:,k,j]/1.12e13)*1.0e15/12.0, s=sym_size_var, facecolor='1.0',color=colours[j], lw = line_width_var)
        plt.plot([-10,10],[-10,10])
        plt.xlim(-5,10)
        plt.ylim(-5,10)
        plt.title(plot_names[k])

plt.tight_layout()
plt.show()
	
fig = plt.figure(figsize=(5*3.13,3*3.13))
for i,k in enumerate(np.arange(12,19)):  
    ax1 = fig.add_subplot(2,4,i+1)
    for j in np.arange(np.size(filenamesb)):
        dat=((box_co2_flux[:,:,k,j]/1.12e13)*1.0e15/12.0)
        mdat=np.ma.masked_array(dat,np.isnan(dat))
        mm=np.mean(mdat)
        dat2=qump_data[2,:,:]
        mdat2=np.ma.masked_array(dat2,np.isnan(dat))
        mm2=np.mean(mdat2)
	ax1.scatter(dat2-mm2,dat-mm, s=sym_size_var, facecolor='1.0',color=colours[j], lw = line_width_var)
	plt.plot([-10,10],[-10,10])
	plt.xlim(-2,2)
	plt.ylim(-2,2)
	plt.title(plot_names[k])

plt.tight_layout()
plt.show()

